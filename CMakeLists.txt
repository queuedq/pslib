cmake_minimum_required(VERSION 3.15.0)
project(pslib LANGUAGES CXX VERSION 0.1.0)
set(CMAKE_CXX_STANDARD 17)

# https://github.com/google/googletest/blob/master/googletest/README.md
# Download and unpack googletest at configure time
configure_file(CMakeLists.txt.in googletest-download/CMakeLists.txt)
execute_process(COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}" .
  RESULT_VARIABLE result
  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/googletest-download )
if(result)
  message(FATAL_ERROR "CMake step for googletest failed: ${result}")
endif()
execute_process(COMMAND ${CMAKE_COMMAND} --build .
  RESULT_VARIABLE result
  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/googletest-download )
if(result)
  message(FATAL_ERROR "Build step for googletest failed: ${result}")
endif()

# Prevent overriding the parent project's compiler/linker
# settings on Windows
set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)

# Add googletest directly to our build. This defines
# the gtest and gtest_main targets.
add_subdirectory(${CMAKE_CURRENT_BINARY_DIR}/googletest-src
                 ${CMAKE_CURRENT_BINARY_DIR}/googletest-build
                 EXCLUDE_FROM_ALL)

# The gtest/gtest_main targets carry header search path
# dependencies automatically when using CMake 2.8.11 or
# later. Otherwise we have to add them here ourselves.
if (CMAKE_VERSION VERSION_LESS 2.8.11)
  include_directories("${gtest_SOURCE_DIR}/include")
endif()

# Now simply link against gtest or gtest_main as needed. Eg
# add_executable(example example.cpp)
# target_link_libraries(example gtest_main)
# add_test(NAME example_test COMMAND example)


add_library(template INTERFACE)
target_include_directories(template INTERFACE template)
target_sources(template INTERFACE template/template.h)

include(CTest)
include(GoogleTest)

# Building a monolithic test executable does not work
# since there are duplicate variables all over the library.

# file(GLOB_RECURSE sources ${CMAKE_CURRENT_SOURCE_DIR}/*.test.cc)
# set(testName ${PROJECT_NAME}_test)
# add_executable(${testName} ${sources})
# target_link_libraries(${testName} gtest_main)
# gtest_discover_tests(${testName})

# Instead, make one executable per each test.

file(GLOB_RECURSE testFiles RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.test.cc)
foreach(file ${testFiles})
  string(REPLACE ".test.cc" "__test" target ${file})
  string(REPLACE "/" "__" target ${target})
  add_executable(${target} ${file})
  target_link_libraries(${target} template gtest_main)
  gtest_discover_tests(${target})
endforeach()
